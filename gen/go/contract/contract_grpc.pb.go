// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: contract.proto

package contract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MarzbanManagementPanel_ListUsers_FullMethodName   = "/luckyComet55.marzban_mgmt.MarzbanManagementPanel/ListUsers"
	MarzbanManagementPanel_CreateUser_FullMethodName  = "/luckyComet55.marzban_mgmt.MarzbanManagementPanel/CreateUser"
	MarzbanManagementPanel_ListProxies_FullMethodName = "/luckyComet55.marzban_mgmt.MarzbanManagementPanel/ListProxies"
	MarzbanManagementPanel_GetUser_FullMethodName     = "/luckyComet55.marzban_mgmt.MarzbanManagementPanel/GetUser"
)

// MarzbanManagementPanelClient is the client API for MarzbanManagementPanel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarzbanManagementPanelClient interface {
	ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserShortInfo], error)
	CreateUser(ctx context.Context, in *CreateUserInfo, opts ...grpc.CallOption) (*UserInfo, error)
	ListProxies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProxyProtocolInfo], error)
	GetUser(ctx context.Context, in *UserShortInfo, opts ...grpc.CallOption) (*UserInfo, error)
}

type marzbanManagementPanelClient struct {
	cc grpc.ClientConnInterface
}

func NewMarzbanManagementPanelClient(cc grpc.ClientConnInterface) MarzbanManagementPanelClient {
	return &marzbanManagementPanelClient{cc}
}

func (c *marzbanManagementPanelClient) ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserShortInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MarzbanManagementPanel_ServiceDesc.Streams[0], MarzbanManagementPanel_ListUsers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, UserShortInfo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarzbanManagementPanel_ListUsersClient = grpc.ServerStreamingClient[UserShortInfo]

func (c *marzbanManagementPanelClient) CreateUser(ctx context.Context, in *CreateUserInfo, opts ...grpc.CallOption) (*UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, MarzbanManagementPanel_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marzbanManagementPanelClient) ListProxies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProxyProtocolInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MarzbanManagementPanel_ServiceDesc.Streams[1], MarzbanManagementPanel_ListProxies_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, ProxyProtocolInfo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarzbanManagementPanel_ListProxiesClient = grpc.ServerStreamingClient[ProxyProtocolInfo]

func (c *marzbanManagementPanelClient) GetUser(ctx context.Context, in *UserShortInfo, opts ...grpc.CallOption) (*UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, MarzbanManagementPanel_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarzbanManagementPanelServer is the server API for MarzbanManagementPanel service.
// All implementations must embed UnimplementedMarzbanManagementPanelServer
// for forward compatibility.
type MarzbanManagementPanelServer interface {
	ListUsers(*emptypb.Empty, grpc.ServerStreamingServer[UserShortInfo]) error
	CreateUser(context.Context, *CreateUserInfo) (*UserInfo, error)
	ListProxies(*emptypb.Empty, grpc.ServerStreamingServer[ProxyProtocolInfo]) error
	GetUser(context.Context, *UserShortInfo) (*UserInfo, error)
	mustEmbedUnimplementedMarzbanManagementPanelServer()
}

// UnimplementedMarzbanManagementPanelServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMarzbanManagementPanelServer struct{}

func (UnimplementedMarzbanManagementPanelServer) ListUsers(*emptypb.Empty, grpc.ServerStreamingServer[UserShortInfo]) error {
	return status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedMarzbanManagementPanelServer) CreateUser(context.Context, *CreateUserInfo) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMarzbanManagementPanelServer) ListProxies(*emptypb.Empty, grpc.ServerStreamingServer[ProxyProtocolInfo]) error {
	return status.Errorf(codes.Unimplemented, "method ListProxies not implemented")
}
func (UnimplementedMarzbanManagementPanelServer) GetUser(context.Context, *UserShortInfo) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedMarzbanManagementPanelServer) mustEmbedUnimplementedMarzbanManagementPanelServer() {
}
func (UnimplementedMarzbanManagementPanelServer) testEmbeddedByValue() {}

// UnsafeMarzbanManagementPanelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarzbanManagementPanelServer will
// result in compilation errors.
type UnsafeMarzbanManagementPanelServer interface {
	mustEmbedUnimplementedMarzbanManagementPanelServer()
}

func RegisterMarzbanManagementPanelServer(s grpc.ServiceRegistrar, srv MarzbanManagementPanelServer) {
	// If the following call pancis, it indicates UnimplementedMarzbanManagementPanelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MarzbanManagementPanel_ServiceDesc, srv)
}

func _MarzbanManagementPanel_ListUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarzbanManagementPanelServer).ListUsers(m, &grpc.GenericServerStream[emptypb.Empty, UserShortInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarzbanManagementPanel_ListUsersServer = grpc.ServerStreamingServer[UserShortInfo]

func _MarzbanManagementPanel_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarzbanManagementPanelServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarzbanManagementPanel_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarzbanManagementPanelServer).CreateUser(ctx, req.(*CreateUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarzbanManagementPanel_ListProxies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarzbanManagementPanelServer).ListProxies(m, &grpc.GenericServerStream[emptypb.Empty, ProxyProtocolInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MarzbanManagementPanel_ListProxiesServer = grpc.ServerStreamingServer[ProxyProtocolInfo]

func _MarzbanManagementPanel_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserShortInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarzbanManagementPanelServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarzbanManagementPanel_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarzbanManagementPanelServer).GetUser(ctx, req.(*UserShortInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// MarzbanManagementPanel_ServiceDesc is the grpc.ServiceDesc for MarzbanManagementPanel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarzbanManagementPanel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "luckyComet55.marzban_mgmt.MarzbanManagementPanel",
	HandlerType: (*MarzbanManagementPanelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _MarzbanManagementPanel_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _MarzbanManagementPanel_GetUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListUsers",
			Handler:       _MarzbanManagementPanel_ListUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListProxies",
			Handler:       _MarzbanManagementPanel_ListProxies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "contract.proto",
}
